# -*- coding: utf-8 -*-
"""OCR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BTBR2FsMg5UE-hoSzP5bg7T9buumJnm8
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd drive/MyDrive/CRAFT-pytorch

!pip install craft_text_detector
!pip install --quiet vietocr
!pip install openpyxl

!pip install traceback2
!python utils.py
!python sift_flann.py

import matplotlib.pyplot as plt
from PIL import Image

from vietocr.tool.predictor import Predictor
from vietocr.tool.config import Cfg
#Tải thư viện của vietocr
config = Cfg.load_config_from_name('vgg_transformer')
config['cnn']['pretrained']=False#Mạng nơ-ron tích chập không sử dụng trọng số được huấn luyện trước.
config['device'] = 'cuda:0'#sd gpu
detector = Predictor(config)

from sift_flann import main
image_path = r"CCCD1"
img = main(image_path)

from craft_text_detector import Craft
#image_path = r"CCCD23_output"
# set image path and export folder directory
#image = image_path + ".jpg" # can be filepath, PIL image or numpy array
output_dir = 'outputs/'

# create a craft instance
craft = Craft(output_dir=output_dir, crop_type="poly", cuda=False)

# apply craft text detection and export detected regions to output directory
prediction_result = craft.detect_text(img)

# unload models from ram/gpu
craft.unload_craftnet_model()
craft.unload_refinenet_model()

def test_case(string, list):
  for i in list:
    list1 = []
    list1 = string.split(i)
    if(list1[0] != string):
      return list1
  return None

def format_data(count, string):
  if string[-12:].isnumeric() and  count == 0:
    return string[-12:]
  elif string.isupper() and count == 1:
    return string
  elif string[-4:].isnumeric() and count == 2:
    return string[-10:]
  elif count == 3 and "sex" in string.lower():
    if string.find('sex') == -1:
      index = string.find('Sex')
    else:
      index = string.find('sex')
    gender = string[index + 4 : index + 8]
    country = string[-8:]
    return [gender, country]
  elif count == 4:
    if "lace" in string or "of" in string or "ori" in string:
      return None
    else:
      return string
  elif count == 5 and len(string) > 30:
      if(test_case(string, [":", "dence", "ce"]) != None):
        list1 = test_case(string, [":", "dence", "ce"])
        return list1[-1]
  elif count == 6 and len(string) > 13:
    if string[-4:].isnumeric() or "of" in string or "ex" in string:
      return None
    else:
      return string
  return None

import os
#truy cập vào folder chứa khung hcn
count_data = 0
final_data = []
dir_path = f'./outputs/image_crops'
count = 0
for path in os.listdir(dir_path):
    # kiểm tra đg dẫn có phải tệp
    if os.path.isfile(os.path.join(dir_path, path)):
        count += 1

for i in range(count):
  img = f'outputs/image_crops/crop_{i}.png'
  img = Image.open(img)
  s = detector.predict(img)
  print(s)

try:
  for i in range(count):
    img = f'outputs/image_crops/crop_{i}.png'
    img = Image.open(img)
    s = detector.predict(img)
    if (format_data(count_data,s) != None):
      final_data.append(format_data(count_data,s))
      count_data += 1
  final_data[5 : 7] = [' '.join(final_data[5 : 7])]
  temp = final_data[3]
  final_data.pop(3)
  final_data.insert(3,temp[0])
  final_data.insert(4,temp[1])
  print(final_data)
except:
  print("Please try with the Image that has more Sensitivite, more Brightness, Please no shadow in the Image")

from openpyxl import  load_workbook
path = "CCCD_data.xlsx"
def query_data_excel(list, path):
    wb = load_workbook(path)
    ws = wb.active
    #Lay du lieu trong database(excel)
    ws.append(list)
    wb.save(path)
query_data_excel(final_data, path)

